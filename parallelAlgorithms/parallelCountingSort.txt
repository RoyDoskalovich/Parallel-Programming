parallelCountingSort(arr[n]) {
	temp <-- [0, 0, ..., 0];
	parallel for(i = 0; i < n; i++) {				# Run it parallelly with n processors, in the best case it would happen in O(1) time.
		temp[arr[i]]++;
	}									// arr = [0, 2, 2, 3] --> temp = [1, 0, 2, 1].
	prefixSums <-- parallelPrefixSum(temp);		// prefixSums = [1, 1, 3, 4].

	parallel for (i = 0; i < n; i++) {				# Run it parallelly with n processors, in the best case it would happen in O(1) time.
		prefixSums[arr[i]]--;
		output[prefixSums[arr[i]]] <-- arr[i]
	}
}

# Time complexity in the best case is O(log(n)). 


# As is said, only in the best case the parallel for loops would run in O(1) time, and this happens when the range of the numbers is O(n), there are cases in which the range is O(1), and in order to achieve this wanted running time O(log(n)), we would need to adjust the algorithm a bit.

adjustedCountingSort(arr[n]):
	
	init b[n] array;
	
	parallel for (i = 0; i < n; i++):		# Run this for loop parallelly with n processors.
		b[i] = arr[i] * 10 ^ log(n);		// We want the log(n) to be rounded up. Example: arr = [1, 3, 1, 2, 2, ...] and assume that log(n) rounded up is 3, then b = [1000, 3000, 1000, 2000, ...].
	
		parallel for (j = 1, k = 1; j < log(n); j++, k *= 10):
			b[i] += randNum(range 0 to 9) * k;			b = [1234, 3125, 1989, 2799, ...].

	parallelCountingSort(b);
	return arr according to the order of the sorted order of b; Or remove from each element of b the rounded up log(n) rightmost digits and return it. 