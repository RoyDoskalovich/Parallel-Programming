bitonicMerge(arr[], start length, direction) {
	
	if (length > 1) {
		k = length / 2;
		
		parallel for (i = start; i < start + k; i++) {
			comapreAndExchange(arr, i, i + k, direction);
		}
		
		# Parallelly run both of those two following lines:
		bitonicMerge(arr, start, k, direction);
		bitonicMerge(arr, start + k, k, direction);
	}
}



bitonicMergeSort(arr[], start, length, direction){
	
	if (length > 1) {
		k = length / 2;

		bitonicMergeSort(arr, start, k, 1); // Direction is uppp.
		bitonicMergeSort(arr, start + k, k, 0; // Direction is down.

		bitonicMerge(arr, start, length, direction);
	}	
}


Input array:	[3, 7, 4, 8, 6, 2, 1, 5].
			
			   +      -     +      -
			[3, 7, 8, 4, 2, 6, 5, 1].

			   +      -     +      -
			[3, 4, 8, 7, 5, 6, 2, 1].
				
				+	      -
			[3, 4, 7, 8, 6, 5, 2, 1].
		
			[3, 4, 2, 1, 6, 5, 7, 8].

			[2, 1, 3 ,4, 6, 5, 7, 8].

			[1, 2, 3, 4, 5, 6, 7, 9].
		