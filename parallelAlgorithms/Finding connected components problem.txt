Finding connected components problem:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _  
# Version 1 [BFS]:

parallelConnectedComponentsBFS(V, E) {

	init an empty list of sets ccList;
	init visited[|V|] <-- [false, false, ..., false];	# Do it parallelly with |V| processors.
	
	for each v in V {
		if (not visited[v]) {
			cc <-- emptyGroup;
			level <-- 0;
			fLevel <-- {v};
			visited[v] <-- true;

			while (fLevel != emptyGroup) {
				{v1, v2, ..., vp} <-- fLevel.dequeue();
				for each vi in {v1, v2, ..., vp} {		# Let processor pi work on vertex vi.
					cc <-- cc Union {vi};
					if (not visited[u]) {
						fLevel+1.enqueue(u);
						visited[u] <-- true;
					}
				}
				level <-- level + 1;
			}
			add cc to ccList;
		}
	}	
	return ccList;		
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
# Version 2 [bottomUpBFS]:

parallelConnectdComponentsBottomUpBFS(V, E) {
	
	init an empty list of sets ccList;
	counter <-- 1;
	depth <-- 0;
	parents[|V|] <-- [-1, -1, ..., -1];		# Do it parallelly with |V| processors.
	cc <-- emptyGroup;
	
	for each v in V such that parents[v] is -1 {
		parents[v] <-- depth;
		cc <-- {v};
		
		while (counter != 0) {
			bottomUpStep(cc);
			depth++;
		}			
		add cc to ccList;
	}
	return ccList;
}


bottomUpStep(cc) {
	
	counter <-- 0;
	
	parallel for each v in V {
		if (parents[v] = -1) {
			parallel for each u neighbor of v {
				if (parents[u] = depth) {
					parents[v] <-- depth + 1;
					cc <-- cc Union {v};
					counter <-- 1;
					break;
				}
			}
		}
	} 
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
Version #3 [DFS]:

parallelConnectedComponentsDFS(V, E) {
	
	init an empty list of sets ccList;
	init components[|V|] <-- [-1, -1, ..., -1];		# Do it parallelly with |V| processors.
	currentComponent <-- 0;

	parallel for each v in V {
		if (components[v] = -1) {
			DFSVisit(v, currentComponent, components);
			currentComponent++;
		}
	}
	for each v in V {
		add v to ccList[components[v]]; // Add each vertex to his matching component.
	}
}

DFSVisit(v, currentComponent, components) {
	
	components[v] <-- currentComponent;
	parallel for each u neighbor of v:
		if (components[u] = -1) {
			DFSVisit(u, currentComponent, components);
		}
}


_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
